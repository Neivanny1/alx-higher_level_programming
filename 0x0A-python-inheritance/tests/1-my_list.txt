=======================
``MyList`` class
=======================

Usage of class ``MyList``:
Defines class ``MyList`` that prints a sorted list
-------------------

Import:
    >>> MyList = __import__('1-my_list').MyList

Print list:
    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(4)
    >>> my_list.append(5)
    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]

Print set:
    >>> my_set = MyList()
    >>> my_set.append(1)
    >>> my_set.append(2)
    >>> my_set.append(3)
    >>> my_set = set(my_set)
    >>> my_set.print_sorted()
    Traceback (most recent call last):
    	  ...
    AttributeError: 'set' object has no attribute 'print_sorted'

Print list with varying element types:
    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append("hi")
    >>> my_list.append((2, 3))
    >>> my_list.append(4)
    >>> my_list.append(5)
    >>> my_list.print_sorted()
    Traceback (most recent call last):
    	  ...
    TypeError: unorderable types: str() < int()

Print string:
    >>> str = "Hello"
    >>> str.print_sorted()
    Traceback (most recent call last):
    	  ...
    AttributeError: 'str' object has no attribute 'print_sorted'

Print tuple:
    >>> tuple = (1, 2, 3)
    >>> tuple.print_sorted()
    Traceback (most recent call last):
    	  ...
    AttributeError: 'tuple' object has no attribute 'print_sorted'

Print empty list:
    >>> my_list = MyList()
    >>> my_list.print_sorted()
    []

Check that print_sorted() returns new list:
    >>> my_list = MyList()
    >>> first_list = id(my_list)
    >>> my_list.append(1)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(4)
    >>> my_list.append(5)
    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]
    >>> second_list = id(my_list)
    >>> first_list == second_list
    True
